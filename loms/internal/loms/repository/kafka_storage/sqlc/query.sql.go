// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMessage = `-- name: CreateMessage :exec
insert into kafka_outbox(event, entity_type, entity_id, data)
values
    ($1,$2, $3, $4)
`

type CreateMessageParams struct {
	Event      pgtype.Text
	EntityType pgtype.Text
	EntityID   pgtype.Text
	Data       pgtype.Text
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.Exec(ctx, createMessage,
		arg.Event,
		arg.EntityType,
		arg.EntityID,
		arg.Data,
	)
	return err
}

const getMessages = `-- name: GetMessages :many
select message_id, created_at, updated_at, status, error, event, entity_type, entity_id, data
from kafka_outbox
where status = $1
    for update skip locked
`

func (q *Queries) GetMessages(ctx context.Context, status NullMessageStatusType) ([]KafkaOutbox, error) {
	rows, err := q.db.Query(ctx, getMessages, status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []KafkaOutbox
	for rows.Next() {
		var i KafkaOutbox
		if err := rows.Scan(
			&i.MessageID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.Error,
			&i.Event,
			&i.EntityType,
			&i.EntityID,
			&i.Data,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageStatus = `-- name: UpdateMessageStatus :exec
update kafka_outbox
set status = $1,
    updated_at = now()
where message_id = $2
`

type UpdateMessageStatusParams struct {
	Status    NullMessageStatusType
	MessageID pgtype.UUID
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) error {
	_, err := q.db.Exec(ctx, updateMessageStatus, arg.Status, arg.MessageID)
	return err
}
