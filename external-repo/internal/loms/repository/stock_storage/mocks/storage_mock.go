// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"loms/internal/loms/repository/stock_storage"

	mock "github.com/stretchr/testify/mock"
)

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StorageMock is an autogenerated mock type for the Storage type
type StorageMock struct {
	mock.Mock
}

type StorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageMock) EXPECT() *StorageMock_Expecter {
	return &StorageMock_Expecter{mock: &_m.Mock}
}

// GetBySku provides a mock function for the type StorageMock
func (_mock *StorageMock) GetBySku(ctx context.Context, SkuID int64) (uint16, error) {
	ret := _mock.Called(ctx, SkuID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySku")
	}

	var r0 uint16
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (uint16, error)); ok {
		return returnFunc(ctx, SkuID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) uint16); ok {
		r0 = returnFunc(ctx, SkuID)
	} else {
		r0 = ret.Get(0).(uint16)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, SkuID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StorageMock_GetBySku_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySku'
type StorageMock_GetBySku_Call struct {
	*mock.Call
}

// GetBySku is a helper method to define mock.On call
//   - ctx
//   - SkuID
func (_e *StorageMock_Expecter) GetBySku(ctx interface{}, SkuID interface{}) *StorageMock_GetBySku_Call {
	return &StorageMock_GetBySku_Call{Call: _e.mock.On("GetBySku", ctx, SkuID)}
}

func (_c *StorageMock_GetBySku_Call) Run(run func(ctx context.Context, SkuID int64)) *StorageMock_GetBySku_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StorageMock_GetBySku_Call) Return(v uint16, err error) *StorageMock_GetBySku_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *StorageMock_GetBySku_Call) RunAndReturn(run func(ctx context.Context, SkuID int64) (uint16, error)) *StorageMock_GetBySku_Call {
	_c.Call.Return(run)
	return _c
}

// Reserve provides a mock function for the type StorageMock
func (_mock *StorageMock) Reserve(ctx context.Context, items []*stock_storage.ReserveItem) error {
	ret := _mock.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for Reserve")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*stock_storage.ReserveItem) error); ok {
		r0 = returnFunc(ctx, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageMock_Reserve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reserve'
type StorageMock_Reserve_Call struct {
	*mock.Call
}

// Reserve is a helper method to define mock.On call
//   - ctx
//   - items
func (_e *StorageMock_Expecter) Reserve(ctx interface{}, items interface{}) *StorageMock_Reserve_Call {
	return &StorageMock_Reserve_Call{Call: _e.mock.On("Reserve", ctx, items)}
}

func (_c *StorageMock_Reserve_Call) Run(run func(ctx context.Context, items []*stock_storage.ReserveItem)) *StorageMock_Reserve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*stock_storage.ReserveItem))
	})
	return _c
}

func (_c *StorageMock_Reserve_Call) Return(err error) *StorageMock_Reserve_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageMock_Reserve_Call) RunAndReturn(run func(ctx context.Context, items []*stock_storage.ReserveItem) error) *StorageMock_Reserve_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveCancel provides a mock function for the type StorageMock
func (_mock *StorageMock) ReserveCancel(ctx context.Context, items []*stock_storage.ReserveItem) error {
	ret := _mock.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for ReserveCancel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*stock_storage.ReserveItem) error); ok {
		r0 = returnFunc(ctx, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageMock_ReserveCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveCancel'
type StorageMock_ReserveCancel_Call struct {
	*mock.Call
}

// ReserveCancel is a helper method to define mock.On call
//   - ctx
//   - items
func (_e *StorageMock_Expecter) ReserveCancel(ctx interface{}, items interface{}) *StorageMock_ReserveCancel_Call {
	return &StorageMock_ReserveCancel_Call{Call: _e.mock.On("ReserveCancel", ctx, items)}
}

func (_c *StorageMock_ReserveCancel_Call) Run(run func(ctx context.Context, items []*stock_storage.ReserveItem)) *StorageMock_ReserveCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*stock_storage.ReserveItem))
	})
	return _c
}

func (_c *StorageMock_ReserveCancel_Call) Return(err error) *StorageMock_ReserveCancel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageMock_ReserveCancel_Call) RunAndReturn(run func(ctx context.Context, items []*stock_storage.ReserveItem) error) *StorageMock_ReserveCancel_Call {
	_c.Call.Return(run)
	return _c
}

// ReserveRemove provides a mock function for the type StorageMock
func (_mock *StorageMock) ReserveRemove(ctx context.Context, items []*stock_storage.ReserveItem) error {
	ret := _mock.Called(ctx, items)

	if len(ret) == 0 {
		panic("no return value specified for ReserveRemove")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*stock_storage.ReserveItem) error); ok {
		r0 = returnFunc(ctx, items)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageMock_ReserveRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReserveRemove'
type StorageMock_ReserveRemove_Call struct {
	*mock.Call
}

// ReserveRemove is a helper method to define mock.On call
//   - ctx
//   - items
func (_e *StorageMock_Expecter) ReserveRemove(ctx interface{}, items interface{}) *StorageMock_ReserveRemove_Call {
	return &StorageMock_ReserveRemove_Call{Call: _e.mock.On("ReserveRemove", ctx, items)}
}

func (_c *StorageMock_ReserveRemove_Call) Run(run func(ctx context.Context, items []*stock_storage.ReserveItem)) *StorageMock_ReserveRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*stock_storage.ReserveItem))
	})
	return _c
}

func (_c *StorageMock_ReserveRemove_Call) Return(err error) *StorageMock_ReserveRemove_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageMock_ReserveRemove_Call) RunAndReturn(run func(ctx context.Context, items []*stock_storage.ReserveItem) error) *StorageMock_ReserveRemove_Call {
	_c.Call.Return(run)
	return _c
}
