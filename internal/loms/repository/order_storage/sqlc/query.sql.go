// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addOrderItem = `-- name: AddOrderItem :exec
insert into order_item (order_id, sku_id, quantity)
values ($1, $2, $3)
`

type AddOrderItemParams struct {
	OrderID  int64
	SkuID    int64
	Quantity pgtype.Int4
}

func (q *Queries) AddOrderItem(ctx context.Context, arg AddOrderItemParams) error {
	_, err := q.db.Exec(ctx, addOrderItem, arg.OrderID, arg.SkuID, arg.Quantity)
	return err
}

const createOrder = `-- name: CreateOrder :one
insert into "order"(user_id, status, created_at, updated_at)
values
    ($1,$2, now(), now())
returning order_id
`

type CreateOrderParams struct {
	UserID int64
	Status OrderStatusType
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int64, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.UserID, arg.Status)
	var order_id int64
	err := row.Scan(&order_id)
	return order_id, err
}

const getOrderByOrderID = `-- name: GetOrderByOrderID :one
select order_id, user_id, status, created_at, updated_at
from "order"
where order_id = $1
`

func (q *Queries) GetOrderByOrderID(ctx context.Context, orderID int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrderByOrderID, orderID)
	var i Order
	err := row.Scan(
		&i.OrderID,
		&i.UserID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
select order_item_id, order_id, sku_id, quantity
from order_item
where
    order_id = $1
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID int64) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.SkuID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatusOrderByOrderID = `-- name: UpdateStatusOrderByOrderID :exec
update "order"
set status = $1,
    updated_at = now()
where
    order_id = $2
`

type UpdateStatusOrderByOrderIDParams struct {
	Status  OrderStatusType
	OrderID int64
}

func (q *Queries) UpdateStatusOrderByOrderID(ctx context.Context, arg UpdateStatusOrderByOrderIDParams) error {
	_, err := q.db.Exec(ctx, updateStatusOrderByOrderID, arg.Status, arg.OrderID)
	return err
}
