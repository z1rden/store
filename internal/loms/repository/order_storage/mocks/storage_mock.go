// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"loms/internal/loms/repository/order_storage"

	mock "github.com/stretchr/testify/mock"
)

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StorageMock is an autogenerated mock type for the Storage type
type StorageMock struct {
	mock.Mock
}

type StorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageMock) EXPECT() *StorageMock_Expecter {
	return &StorageMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type StorageMock
func (_mock *StorageMock) Create(ctx context.Context, orderID int64, items []*order_storage.Item) (int64, error) {
	ret := _mock.Called(ctx, orderID, items)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, []*order_storage.Item) (int64, error)); ok {
		return returnFunc(ctx, orderID, items)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, []*order_storage.Item) int64); ok {
		r0 = returnFunc(ctx, orderID, items)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, []*order_storage.Item) error); ok {
		r1 = returnFunc(ctx, orderID, items)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StorageMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type StorageMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - orderID
//   - items
func (_e *StorageMock_Expecter) Create(ctx interface{}, orderID interface{}, items interface{}) *StorageMock_Create_Call {
	return &StorageMock_Create_Call{Call: _e.mock.On("Create", ctx, orderID, items)}
}

func (_c *StorageMock_Create_Call) Run(run func(ctx context.Context, orderID int64, items []*order_storage.Item)) *StorageMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]*order_storage.Item))
	})
	return _c
}

func (_c *StorageMock_Create_Call) Return(n int64, err error) *StorageMock_Create_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *StorageMock_Create_Call) RunAndReturn(run func(ctx context.Context, orderID int64, items []*order_storage.Item) (int64, error)) *StorageMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type StorageMock
func (_mock *StorageMock) GetByID(ctx context.Context, orderID int64) (*order_storage.Order, error) {
	ret := _mock.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *order_storage.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*order_storage.Order, error)); ok {
		return returnFunc(ctx, orderID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *order_storage.Order); ok {
		r0 = returnFunc(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order_storage.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StorageMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type StorageMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx
//   - orderID
func (_e *StorageMock_Expecter) GetByID(ctx interface{}, orderID interface{}) *StorageMock_GetByID_Call {
	return &StorageMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, orderID)}
}

func (_c *StorageMock_GetByID_Call) Run(run func(ctx context.Context, orderID int64)) *StorageMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StorageMock_GetByID_Call) Return(order *order_storage.Order, err error) *StorageMock_GetByID_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *StorageMock_GetByID_Call) RunAndReturn(run func(ctx context.Context, orderID int64) (*order_storage.Order, error)) *StorageMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// SetStatus provides a mock function for the type StorageMock
func (_mock *StorageMock) SetStatus(ctx context.Context, orderID int64, status string) error {
	ret := _mock.Called(ctx, orderID, status)

	if len(ret) == 0 {
		panic("no return value specified for SetStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = returnFunc(ctx, orderID, status)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageMock_SetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStatus'
type StorageMock_SetStatus_Call struct {
	*mock.Call
}

// SetStatus is a helper method to define mock.On call
//   - ctx
//   - orderID
//   - status
func (_e *StorageMock_Expecter) SetStatus(ctx interface{}, orderID interface{}, status interface{}) *StorageMock_SetStatus_Call {
	return &StorageMock_SetStatus_Call{Call: _e.mock.On("SetStatus", ctx, orderID, status)}
}

func (_c *StorageMock_SetStatus_Call) Run(run func(ctx context.Context, orderID int64, status string)) *StorageMock_SetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *StorageMock_SetStatus_Call) Return(err error) *StorageMock_SetStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageMock_SetStatus_Call) RunAndReturn(run func(ctx context.Context, orderID int64, status string) error) *StorageMock_SetStatus_Call {
	_c.Call.Return(run)
	return _c
}
