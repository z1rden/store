// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc

import (
	"context"
)

const getBySku = `-- name: GetBySku :one
select sku_id, total_count, reserved
from stock
where
    sku_id = $1 limit 1
`

func (q *Queries) GetBySku(ctx context.Context, skuID int64) (Stock, error) {
	row := q.db.QueryRow(ctx, getBySku, skuID)
	var i Stock
	err := row.Scan(&i.SkuID, &i.TotalCount, &i.Reserved)
	return i, err
}

const reserve = `-- name: Reserve :exec
update stock
    set reserved = reserved + $1
where
    sku_id = $2
returning sku_id, total_count, reserved
`

type ReserveParams struct {
	Reserved int32
	SkuID    int64
}

func (q *Queries) Reserve(ctx context.Context, arg ReserveParams) error {
	_, err := q.db.Exec(ctx, reserve, arg.Reserved, arg.SkuID)
	return err
}

const reserveCancel = `-- name: ReserveCancel :exec
update stock
    set reserved = reserved - $1
where sku_id = $2
returning sku_id, total_count, reserved
`

type ReserveCancelParams struct {
	Reserved int32
	SkuID    int64
}

func (q *Queries) ReserveCancel(ctx context.Context, arg ReserveCancelParams) error {
	_, err := q.db.Exec(ctx, reserveCancel, arg.Reserved, arg.SkuID)
	return err
}

const reserveRemove = `-- name: ReserveRemove :exec
update stock
    set reserved = reserved - $1,
        total_count = total_count - $1
where
    sku_id = $2
returning sku_id, total_count, reserved
`

type ReserveRemoveParams struct {
	Reserved int32
	SkuID    int64
}

func (q *Queries) ReserveRemove(ctx context.Context, arg ReserveRemoveParams) error {
	_, err := q.db.Exec(ctx, reserveRemove, arg.Reserved, arg.SkuID)
	return err
}
