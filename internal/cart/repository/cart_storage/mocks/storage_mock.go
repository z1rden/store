// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"cart/internal/cart/repository/cart_storage"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewStorageMock creates a new instance of StorageMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageMock {
	mock := &StorageMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// StorageMock is an autogenerated mock type for the Storage type
type StorageMock struct {
	mock.Mock
}

type StorageMock_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageMock) EXPECT() *StorageMock_Expecter {
	return &StorageMock_Expecter{mock: &_m.Mock}
}

// AddItem provides a mock function for the type StorageMock
func (_mock *StorageMock) AddItem(ctx context.Context, userID int64, skuID int64, count uint16) error {
	ret := _mock.Called(ctx, userID, skuID, count)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64, uint16) error); ok {
		r0 = returnFunc(ctx, userID, skuID, count)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageMock_AddItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItem'
type StorageMock_AddItem_Call struct {
	*mock.Call
}

// AddItem is a helper method to define mock.On call
//   - ctx
//   - userID
//   - skuID
//   - count
func (_e *StorageMock_Expecter) AddItem(ctx interface{}, userID interface{}, skuID interface{}, count interface{}) *StorageMock_AddItem_Call {
	return &StorageMock_AddItem_Call{Call: _e.mock.On("AddItem", ctx, userID, skuID, count)}
}

func (_c *StorageMock_AddItem_Call) Run(run func(ctx context.Context, userID int64, skuID int64, count uint16)) *StorageMock_AddItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(uint16))
	})
	return _c
}

func (_c *StorageMock_AddItem_Call) Return(err error) *StorageMock_AddItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageMock_AddItem_Call) RunAndReturn(run func(ctx context.Context, userID int64, skuID int64, count uint16) error) *StorageMock_AddItem_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCartByUserID provides a mock function for the type StorageMock
func (_mock *StorageMock) DeleteCartByUserID(ctx context.Context, userID int64) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCartByUserID")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageMock_DeleteCartByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCartByUserID'
type StorageMock_DeleteCartByUserID_Call struct {
	*mock.Call
}

// DeleteCartByUserID is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *StorageMock_Expecter) DeleteCartByUserID(ctx interface{}, userID interface{}) *StorageMock_DeleteCartByUserID_Call {
	return &StorageMock_DeleteCartByUserID_Call{Call: _e.mock.On("DeleteCartByUserID", ctx, userID)}
}

func (_c *StorageMock_DeleteCartByUserID_Call) Run(run func(ctx context.Context, userID int64)) *StorageMock_DeleteCartByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StorageMock_DeleteCartByUserID_Call) Return(err error) *StorageMock_DeleteCartByUserID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageMock_DeleteCartByUserID_Call) RunAndReturn(run func(ctx context.Context, userID int64) error) *StorageMock_DeleteCartByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteItem provides a mock function for the type StorageMock
func (_mock *StorageMock) DeleteItem(ctx context.Context, userID int64, skuID int64) error {
	ret := _mock.Called(ctx, userID, skuID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteItem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = returnFunc(ctx, userID, skuID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// StorageMock_DeleteItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteItem'
type StorageMock_DeleteItem_Call struct {
	*mock.Call
}

// DeleteItem is a helper method to define mock.On call
//   - ctx
//   - userID
//   - skuID
func (_e *StorageMock_Expecter) DeleteItem(ctx interface{}, userID interface{}, skuID interface{}) *StorageMock_DeleteItem_Call {
	return &StorageMock_DeleteItem_Call{Call: _e.mock.On("DeleteItem", ctx, userID, skuID)}
}

func (_c *StorageMock_DeleteItem_Call) Run(run func(ctx context.Context, userID int64, skuID int64)) *StorageMock_DeleteItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *StorageMock_DeleteItem_Call) Return(err error) *StorageMock_DeleteItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *StorageMock_DeleteItem_Call) RunAndReturn(run func(ctx context.Context, userID int64, skuID int64) error) *StorageMock_DeleteItem_Call {
	_c.Call.Return(run)
	return _c
}

// GetCartByUserID provides a mock function for the type StorageMock
func (_mock *StorageMock) GetCartByUserID(ctx context.Context, userID int64) (*cart_storage.Cart, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartByUserID")
	}

	var r0 *cart_storage.Cart
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*cart_storage.Cart, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *cart_storage.Cart); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cart_storage.Cart)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// StorageMock_GetCartByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCartByUserID'
type StorageMock_GetCartByUserID_Call struct {
	*mock.Call
}

// GetCartByUserID is a helper method to define mock.On call
//   - ctx
//   - userID
func (_e *StorageMock_Expecter) GetCartByUserID(ctx interface{}, userID interface{}) *StorageMock_GetCartByUserID_Call {
	return &StorageMock_GetCartByUserID_Call{Call: _e.mock.On("GetCartByUserID", ctx, userID)}
}

func (_c *StorageMock_GetCartByUserID_Call) Run(run func(ctx context.Context, userID int64)) *StorageMock_GetCartByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *StorageMock_GetCartByUserID_Call) Return(cart *cart_storage.Cart, err error) *StorageMock_GetCartByUserID_Call {
	_c.Call.Return(cart, err)
	return _c
}

func (_c *StorageMock_GetCartByUserID_Call) RunAndReturn(run func(ctx context.Context, userID int64) (*cart_storage.Cart, error)) *StorageMock_GetCartByUserID_Call {
	_c.Call.Return(run)
	return _c
}
