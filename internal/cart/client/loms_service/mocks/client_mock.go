// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"cart/internal/cart/client/loms_service"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewClientMock creates a new instance of ClientMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClientMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClientMock {
	mock := &ClientMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ClientMock is an autogenerated mock type for the Client type
type ClientMock struct {
	mock.Mock
}

type ClientMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ClientMock) EXPECT() *ClientMock_Expecter {
	return &ClientMock_Expecter{mock: &_m.Mock}
}

// OrderCreate provides a mock function for the type ClientMock
func (_mock *ClientMock) OrderCreate(ctx context.Context, user int64, items []*loms_service.OrderItem) (int64, error) {
	ret := _mock.Called(ctx, user, items)

	if len(ret) == 0 {
		panic("no return value specified for OrderCreate")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, []*loms_service.OrderItem) (int64, error)); ok {
		return returnFunc(ctx, user, items)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, []*loms_service.OrderItem) int64); ok {
		r0 = returnFunc(ctx, user, items)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, []*loms_service.OrderItem) error); ok {
		r1 = returnFunc(ctx, user, items)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientMock_OrderCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderCreate'
type ClientMock_OrderCreate_Call struct {
	*mock.Call
}

// OrderCreate is a helper method to define mock.On call
//   - ctx
//   - user
//   - items
func (_e *ClientMock_Expecter) OrderCreate(ctx interface{}, user interface{}, items interface{}) *ClientMock_OrderCreate_Call {
	return &ClientMock_OrderCreate_Call{Call: _e.mock.On("OrderCreate", ctx, user, items)}
}

func (_c *ClientMock_OrderCreate_Call) Run(run func(ctx context.Context, user int64, items []*loms_service.OrderItem)) *ClientMock_OrderCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]*loms_service.OrderItem))
	})
	return _c
}

func (_c *ClientMock_OrderCreate_Call) Return(n int64, err error) *ClientMock_OrderCreate_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ClientMock_OrderCreate_Call) RunAndReturn(run func(ctx context.Context, user int64, items []*loms_service.OrderItem) (int64, error)) *ClientMock_OrderCreate_Call {
	_c.Call.Return(run)
	return _c
}

// StockInfo provides a mock function for the type ClientMock
func (_mock *ClientMock) StockInfo(ctx context.Context, SkuID int64) (uint16, error) {
	ret := _mock.Called(ctx, SkuID)

	if len(ret) == 0 {
		panic("no return value specified for StockInfo")
	}

	var r0 uint16
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (uint16, error)); ok {
		return returnFunc(ctx, SkuID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) uint16); ok {
		r0 = returnFunc(ctx, SkuID)
	} else {
		r0 = ret.Get(0).(uint16)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, SkuID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ClientMock_StockInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StockInfo'
type ClientMock_StockInfo_Call struct {
	*mock.Call
}

// StockInfo is a helper method to define mock.On call
//   - ctx
//   - SkuID
func (_e *ClientMock_Expecter) StockInfo(ctx interface{}, SkuID interface{}) *ClientMock_StockInfo_Call {
	return &ClientMock_StockInfo_Call{Call: _e.mock.On("StockInfo", ctx, SkuID)}
}

func (_c *ClientMock_StockInfo_Call) Run(run func(ctx context.Context, SkuID int64)) *ClientMock_StockInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *ClientMock_StockInfo_Call) Return(v uint16, err error) *ClientMock_StockInfo_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *ClientMock_StockInfo_Call) RunAndReturn(run func(ctx context.Context, SkuID int64) (uint16, error)) *ClientMock_StockInfo_Call {
	_c.Call.Return(run)
	return _c
}
